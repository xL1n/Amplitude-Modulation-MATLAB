clear all
clc

%parameters : 
N = 1000;
snr = 4;
fc = 2000; %carrier frequency  
Fs = 8000; %sample / s
error = 0; %error (number of errors in Tx and Rx_final decided value)

n = 2^16; % number of samples to use in FFT (must be > n)
% MATLAB recommends it to be a power of 2 for speed
% purposes (2^16 = 65536)
%generate 1000 random bits 

data = randi([0,1],1,N);

%sample bit stream 8samples/bit
for c1 = 1:length(data)
    index = (c1 - 1)*8 + 1;
    sample_data(index:index + 7) = data(c1);
end

%sampled wave 

t = linspace(0,N*.001,length(sample_data));
x = sample_data .* cos(2*pi*fc*t);

%transmission stage - AWGN channel 
%generated gaussian noise:
y = awgn(x,snr,'measured');

%demodulated signal
y_dem = y .* cos(2*pi*fc*t);


%filter the demodulated signal by using butterworth filter
[b,a] = butter(5,fc/Fs);
filltered_sig = filtfilt(b,a,y_dem);

%recover the bits
for c3 = 1:length(data)
    index = (c3 - 1)*8 + 1;
    y_decode(c3) = mean(filltered_sig(index:index + 7));
end

%for detecting the bits (1/0) from the recovered bits :

%overall amplitude of original bits are 0.5 (average of 1 or 0 = 0.5 which is the original decisioin threshold)
%due to filter, which attenuates by half of overall amplitude, therefore,
%decision amplitude has been changed from 0.5 to 0.25

%decided value (1/0) after applying decide threshold amplitude of 0.25 (>0.25 = 1 ; <0.25 = 0)
for i = 1:length(data)
    if y_decode(i) > 0.25
        y_final(i) = 1;
    else
        y_final(i) = 0;
    end
end

%find number of errors occur by comparing Tx and Rx_decided bits 
for j = 1:length(data)
    if y_final(j) ~= data(j)
        error = error + 1;
    end
end
BER = error/N;

%ploting for time domain: --------------------
% hold on
% 8samples/bit, hence, 80samples = 10 bits (first 10 bits; 1-80samples)
figure (1)
subplot(3,1,1)
plot(t(1:80),x(1:80))
title 'modulated first 10 bits signal (SNR = 4dB)'

subplot(3,1,2)
plot(t(1:80),y(1:80))
title 'Received first 10 bits signal (SNR = 4dB)'

subplot(3,1,3)
plot(t(1:80),filltered_sig(1:80))
title 'Filtered first 10 bits signal (SNR = 4dB)'


%ploting for frequency domain: ----------------

figure (2)
f = Fs*[-n/2:n/2-1]/n; % calculate frequency for each point
subplot(3,1,1)
data_f= abs(fft(sample_data,n))/8000;
data_f = fftshift(data_f); % shift from 0 -> fs to -fs/2 -> fs/2
plot(f,data_f)
title 'FFT Spectrum of Binary signal (SNR = 4dB)'

subplot(3,1,2)
x_f= abs(fft(x,n))/8000;
x_f = fftshift(x_f); % shift from 0 -> fs to -fs/2 -> fs/2
plot(f,x_f)
title 'FFT Spectrum of Modulated signal (SNR = 4dB)'

subplot(3,1,3)
filtered_f= abs(fft(filltered_sig,n))/8000;
filtered_f = fftshift(filtered_f); % shift from 0 -> fs to -fs/2 -> fs/2
plot(f,filtered_f)
title 'FFT Spectrum of Filtered signal (SNR = 4dB)'
